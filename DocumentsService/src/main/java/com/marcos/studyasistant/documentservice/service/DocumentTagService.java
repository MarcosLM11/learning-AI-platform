package com.marcos.studyasistant.documentservice.service;

import com.marcos.studyasistant.documentservice.entity.DocumentEntity;
import com.marcos.studyasistant.documentservice.entity.DocumentTag;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.UUID;

public interface DocumentTagService {

    /**
     * Adds a tag to a document with an optional confidence score.
     *
     * @param document the document to which the tag will be added
     * @param tag the tag to be added
     * @param confidenceScore the confidence score of the tag, can be null
     * @return the created DocumentTag entity
     */
    DocumentTag addTag(DocumentEntity document, String tag, BigDecimal confidenceScore);

    /**
     * Adds multiple tags to a document.
     *
     * @param document the document to which the tags will be added
     * @param tags the list of tags to be added
     * @return a list of created DocumentTag entities
     */
    List<DocumentTag> addTags(DocumentEntity document, List<String> tags);

    /**
     * Adds auto-generated tags to a document with confidence scores.
     *
     * @param document the document to which the tags will be added
     * @param tagsWithConfidence a map of tags and their corresponding confidence scores
     * @return a list of created DocumentTag entities
     */
    List<DocumentTag> addAutoGeneratedTags(DocumentEntity document, Map<String, BigDecimal> tagsWithConfidence);

    /**
     * Retrieves all tags associated with a document.
     *
     * @param documentId the UUID of the document
     * @return a list of DocumentTag entities associated with the document
     */
    List<DocumentTag> getDocumentTags(UUID documentId);

    /**
     * Retrieves the most used tags across all documents.
     *
     * @param limit the maximum number of tags to retrieve
     * @return a list of the most used tags
     */
    List<String> getMostUsedTags(int limit);

    /**
     * Retrieves documents for a user filtered by a specific tag.
     *
     * @param userId the UUID of the user
     * @param tag the tag to filter documents by
     * @return a list of DocumentTag entities associated with the user's documents that match the tag
     */
    List<DocumentTag> getUserDocumentsByTag(UUID userId, String tag);
}
