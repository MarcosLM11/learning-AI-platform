package com.marcos.studyasistant.documentservice.service.impl;

import com.marcos.studyasistant.documentservice.entity.DocumentEntity;
import com.marcos.studyasistant.documentservice.entity.DocumentTag;
import com.marcos.studyasistant.documentservice.reposiroty.DocumentTagRepository;
import com.marcos.studyasistant.documentservice.service.DocumentTagService;
import jakarta.transaction.Transactional;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
@Transactional
public class DocumentTagServiceImpl implements DocumentTagService {

    private final DocumentTagRepository tagRepository;

    public DocumentTagServiceImpl(DocumentTagRepository tagRepository) {
        this.tagRepository = tagRepository;
    }

    @Override
    public DocumentTag addTag(DocumentEntity document, String tag, BigDecimal confidenceScore) {
        DocumentTag documentTag = new DocumentTag();
        documentTag.setDocument(document);
        documentTag.setTag(tag.toLowerCase().trim());
        documentTag.setConfidenceScore(confidenceScore);

        return tagRepository.save(documentTag);
    }

    @Override
    public List<DocumentTag> addTags(DocumentEntity document, List<String> tags) {
        return tags.stream()
                .map(tag -> addTag(document, tag, null))
                .collect(Collectors.toList());
    }

    @Override
    public List<DocumentTag> addAutoGeneratedTags(DocumentEntity document, Map<String, BigDecimal> tagsWithConfidence) {
        return tagsWithConfidence.entrySet().stream()
                .map(entry -> addTag(document, entry.getKey(), entry.getValue()))
                .collect(Collectors.toList());
    }

    @Override
    public List<DocumentTag> getDocumentTags(UUID documentId) {
        return tagRepository.findByDocumentIdOrderByConfidenceScoreDesc(documentId);
    }

    @Override
    public List<String> getMostUsedTags(int limit) {
        Pageable pageable = PageRequest.of(0, limit);
        return tagRepository.findMostUsedTags(pageable)
                .stream()
                .map(result -> (String) result[0])
                .collect(Collectors.toList());
    }

    @Override
    public List<DocumentTag> getUserDocumentsByTag(UUID userId, String tag) {
        return tagRepository.findByUserIdAndTag(userId, tag.toLowerCase().trim());
    }
}